/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routes/__root";
import { Route as IndexRouteImport } from "./routes/index";
import { Route as PlayerPlayerRouteImport } from "./routes/player.$player";
import { Route as GameGameRouteImport } from "./routes/game.$game";
import { Route as CollectionCollectionRouteImport } from "./routes/collection.$collection";
import { Route as GameGamePlayerPlayerRouteImport } from "./routes/game.$game.player.$player";
import { Route as GameGameEditionEditionRouteImport } from "./routes/game.$game.edition.$edition";
import { Route as GameGameCollectionCollectionRouteImport } from "./routes/game.$game.collection.$collection";
import { Route as GameGameEditionEditionCollectionCollectionRouteImport } from "./routes/game.$game.edition.$edition.collection.$collection";

const IndexRoute = IndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRouteImport,
} as any);
const PlayerPlayerRoute = PlayerPlayerRouteImport.update({
  id: "/player/$player",
  path: "/player/$player",
  getParentRoute: () => rootRouteImport,
} as any);
const GameGameRoute = GameGameRouteImport.update({
  id: "/game/$game",
  path: "/game/$game",
  getParentRoute: () => rootRouteImport,
} as any);
const CollectionCollectionRoute = CollectionCollectionRouteImport.update({
  id: "/collection/$collection",
  path: "/collection/$collection",
  getParentRoute: () => rootRouteImport,
} as any);
const GameGamePlayerPlayerRoute = GameGamePlayerPlayerRouteImport.update({
  id: "/player/$player",
  path: "/player/$player",
  getParentRoute: () => GameGameRoute,
} as any);
const GameGameEditionEditionRoute = GameGameEditionEditionRouteImport.update({
  id: "/edition/$edition",
  path: "/edition/$edition",
  getParentRoute: () => GameGameRoute,
} as any);
const GameGameCollectionCollectionRoute =
  GameGameCollectionCollectionRouteImport.update({
    id: "/collection/$collection",
    path: "/collection/$collection",
    getParentRoute: () => GameGameRoute,
  } as any);
const GameGameEditionEditionCollectionCollectionRoute =
  GameGameEditionEditionCollectionCollectionRouteImport.update({
    id: "/collection/$collection",
    path: "/collection/$collection",
    getParentRoute: () => GameGameEditionEditionRoute,
  } as any);

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/collection/$collection": typeof CollectionCollectionRoute;
  "/game/$game": typeof GameGameRouteWithChildren;
  "/player/$player": typeof PlayerPlayerRoute;
  "/game/$game/collection/$collection": typeof GameGameCollectionCollectionRoute;
  "/game/$game/edition/$edition": typeof GameGameEditionEditionRouteWithChildren;
  "/game/$game/player/$player": typeof GameGamePlayerPlayerRoute;
  "/game/$game/edition/$edition/collection/$collection": typeof GameGameEditionEditionCollectionCollectionRoute;
}
export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/collection/$collection": typeof CollectionCollectionRoute;
  "/game/$game": typeof GameGameRouteWithChildren;
  "/player/$player": typeof PlayerPlayerRoute;
  "/game/$game/collection/$collection": typeof GameGameCollectionCollectionRoute;
  "/game/$game/edition/$edition": typeof GameGameEditionEditionRouteWithChildren;
  "/game/$game/player/$player": typeof GameGamePlayerPlayerRoute;
  "/game/$game/edition/$edition/collection/$collection": typeof GameGameEditionEditionCollectionCollectionRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  "/": typeof IndexRoute;
  "/collection/$collection": typeof CollectionCollectionRoute;
  "/game/$game": typeof GameGameRouteWithChildren;
  "/player/$player": typeof PlayerPlayerRoute;
  "/game/$game/collection/$collection": typeof GameGameCollectionCollectionRoute;
  "/game/$game/edition/$edition": typeof GameGameEditionEditionRouteWithChildren;
  "/game/$game/player/$player": typeof GameGamePlayerPlayerRoute;
  "/game/$game/edition/$edition/collection/$collection": typeof GameGameEditionEditionCollectionCollectionRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/collection/$collection"
    | "/game/$game"
    | "/player/$player"
    | "/game/$game/collection/$collection"
    | "/game/$game/edition/$edition"
    | "/game/$game/player/$player"
    | "/game/$game/edition/$edition/collection/$collection";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/collection/$collection"
    | "/game/$game"
    | "/player/$player"
    | "/game/$game/collection/$collection"
    | "/game/$game/edition/$edition"
    | "/game/$game/player/$player"
    | "/game/$game/edition/$edition/collection/$collection";
  id:
    | "__root__"
    | "/"
    | "/collection/$collection"
    | "/game/$game"
    | "/player/$player"
    | "/game/$game/collection/$collection"
    | "/game/$game/edition/$edition"
    | "/game/$game/player/$player"
    | "/game/$game/edition/$edition/collection/$collection";
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  CollectionCollectionRoute: typeof CollectionCollectionRoute;
  GameGameRoute: typeof GameGameRouteWithChildren;
  PlayerPlayerRoute: typeof PlayerPlayerRoute;
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/player/$player": {
      id: "/player/$player";
      path: "/player/$player";
      fullPath: "/player/$player";
      preLoaderRoute: typeof PlayerPlayerRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/game/$game": {
      id: "/game/$game";
      path: "/game/$game";
      fullPath: "/game/$game";
      preLoaderRoute: typeof GameGameRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/collection/$collection": {
      id: "/collection/$collection";
      path: "/collection/$collection";
      fullPath: "/collection/$collection";
      preLoaderRoute: typeof CollectionCollectionRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/game/$game/player/$player": {
      id: "/game/$game/player/$player";
      path: "/player/$player";
      fullPath: "/game/$game/player/$player";
      preLoaderRoute: typeof GameGamePlayerPlayerRouteImport;
      parentRoute: typeof GameGameRoute;
    };
    "/game/$game/edition/$edition": {
      id: "/game/$game/edition/$edition";
      path: "/edition/$edition";
      fullPath: "/game/$game/edition/$edition";
      preLoaderRoute: typeof GameGameEditionEditionRouteImport;
      parentRoute: typeof GameGameRoute;
    };
    "/game/$game/collection/$collection": {
      id: "/game/$game/collection/$collection";
      path: "/collection/$collection";
      fullPath: "/game/$game/collection/$collection";
      preLoaderRoute: typeof GameGameCollectionCollectionRouteImport;
      parentRoute: typeof GameGameRoute;
    };
    "/game/$game/edition/$edition/collection/$collection": {
      id: "/game/$game/edition/$edition/collection/$collection";
      path: "/collection/$collection";
      fullPath: "/game/$game/edition/$edition/collection/$collection";
      preLoaderRoute: typeof GameGameEditionEditionCollectionCollectionRouteImport;
      parentRoute: typeof GameGameEditionEditionRoute;
    };
  }
}

interface GameGameEditionEditionRouteChildren {
  GameGameEditionEditionCollectionCollectionRoute: typeof GameGameEditionEditionCollectionCollectionRoute;
}

const GameGameEditionEditionRouteChildren: GameGameEditionEditionRouteChildren =
  {
    GameGameEditionEditionCollectionCollectionRoute:
      GameGameEditionEditionCollectionCollectionRoute,
  };

const GameGameEditionEditionRouteWithChildren =
  GameGameEditionEditionRoute._addFileChildren(
    GameGameEditionEditionRouteChildren,
  );

interface GameGameRouteChildren {
  GameGameCollectionCollectionRoute: typeof GameGameCollectionCollectionRoute;
  GameGameEditionEditionRoute: typeof GameGameEditionEditionRouteWithChildren;
  GameGamePlayerPlayerRoute: typeof GameGamePlayerPlayerRoute;
}

const GameGameRouteChildren: GameGameRouteChildren = {
  GameGameCollectionCollectionRoute: GameGameCollectionCollectionRoute,
  GameGameEditionEditionRoute: GameGameEditionEditionRouteWithChildren,
  GameGamePlayerPlayerRoute: GameGamePlayerPlayerRoute,
};

const GameGameRouteWithChildren = GameGameRoute._addFileChildren(
  GameGameRouteChildren,
);

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CollectionCollectionRoute: CollectionCollectionRoute,
  GameGameRoute: GameGameRouteWithChildren,
  PlayerPlayerRoute: PlayerPlayerRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
